package gg.codie.spritecaster.gui;

import gg.codie.spritecaster.SpriteCasterFiles;
import gg.codie.spritecaster.gui.components.ResourcePackListItem;
import gg.codie.spritecaster.gui.components.ResourcePackListItemRenderer;
import gg.codie.spritecaster.resourcepacks.ResourcePack;
import gg.codie.spritecaster.resourcepacks.ResourcePackBuilder;
import gg.codie.spritecaster.resourcepacks.ResourcePackStack;
import gg.codie.spritecaster.texturepacks.*;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.*;
import java.io.File;
import java.io.IOException;
import java.util.Locale;
import java.util.zip.ZipFile;

public class ConvertingScreen {
    public JPanel contentPane;
    private JPanel logoPanel;
    private JProgressBar progressBar1;
    private JLabel progressText;

    public ConvertingScreen(File resourcePackFile) {
        JLabel logoLabel = new JLabel(new ImageIcon(getClass().getResource("/logo.png")));
        logoPanel.add(logoLabel);
        new Thread(() -> {
            try {
                if (!resourcePackFile.exists()) return;
                System.out.println("Selected " + resourcePackFile.getName());
                System.out.println("Converting resource pack...");
                progressText.setText("Loading " + resourcePackFile.getName());
                ZipFile resourcePackZip = new ZipFile(resourcePackFile); //1

                ResourcePack resourcePack = new ResourcePackBuilder(resourcePackZip).build();
                ResourcePackStack resourcePackStack = new ResourcePackStack();
                resourcePackStack.add(resourcePack);
                progressBar1.setValue(33);
                progressText.setText("Building texture packs... " + resourcePackFile.getName());
                TexturePack b173TexturePack = new Beta173TexturePackBuilder(resourcePackStack).build(); //2
                progressBar1.setValue(progressBar1.getValue() + (33 / 7));
                TexturePack b166texturePack = new Beta166TexturePackBuilder(resourcePackStack).build(); //3
                progressBar1.setValue(progressBar1.getValue() + (33 / 7));
                TexturePack b1501TexturePack = new Beta1501TexturePackBuilder(resourcePackStack).build(); //4
                progressBar1.setValue(progressBar1.getValue() + (33 / 7));
                TexturePack a11201TexturePack = new Alpha11201TexturePackBuilder(resourcePackStack).build(); //5
                progressBar1.setValue(progressBar1.getValue() + (33 / 7));
                TexturePack a1010TexturePack = new Alpha1010TexturePackBuilder(resourcePackStack).build(); //6
                progressBar1.setValue(progressBar1.getValue() + (33 / 7));
                TexturePack infdev20100618TexturePack = new Infdev20100618TexturePackBuilder(resourcePackStack).build(); //7
                progressBar1.setValue(progressBar1.getValue() + (33 / 7));
                TexturePack indev20100205TexturePack = new Indev20100205TexturePackBuilder(resourcePackStack).build(); //8
                progressBar1.setValue(progressBar1.getValue() + (33 / 7));

                progressText.setText("Saving... " + resourcePackFile.getName());
                b166texturePack.save(); //9
                progressBar1.setValue(progressBar1.getValue() + (33 / 7));
                b173TexturePack.save(); //10
                progressBar1.setValue(progressBar1.getValue() + (33 / 7));
                b1501TexturePack.save(); //11
                progressBar1.setValue(progressBar1.getValue() + (33 / 7));
                a11201TexturePack.save(); //12
                progressBar1.setValue(progressBar1.getValue() + (33 / 7));
                a1010TexturePack.save(); //13
                progressBar1.setValue(progressBar1.getValue() + (33 / 7));
                infdev20100618TexturePack.save(); //14;
                progressBar1.setValue(progressBar1.getValue() + (33 / 7));
                indev20100205TexturePack.save(); //15
                progressBar1.setValue(progressBar1.getValue() + (33 / 7));

                System.out.println("Done!");
                progressBar1.setValue(100);
                FrameManager.getInstance().setContentPane(new DoneScreen().contentPane);
                FrameManager.getInstance().pack();
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }).start();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new BorderLayout(0, 0));
        panel1.setMaximumSize(new Dimension(500, 300));
        contentPane = new JPanel();
        contentPane.setLayout(new BorderLayout(0, 0));
        contentPane.setMaximumSize(new Dimension(500, 200));
        contentPane.setMinimumSize(new Dimension(500, 200));
        contentPane.setPreferredSize(new Dimension(500, 200));
        panel1.add(contentPane, BorderLayout.CENTER);
        contentPane.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(25, 25, 25, 25), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, new Color(-4473925)));
        logoPanel = new JPanel();
        logoPanel.setLayout(new BorderLayout(0, 0));
        logoPanel.setAlignmentY(0.5f);
        logoPanel.setMaximumSize(new Dimension(450, 53));
        logoPanel.setMinimumSize(new Dimension(450, 53));
        logoPanel.setPreferredSize(new Dimension(450, 53));
        contentPane.add(logoPanel, BorderLayout.NORTH);
        logoPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, new Color(-4473925)));
        progressText = new JLabel();
        progressText.setAutoscrolls(false);
        progressText.setDoubleBuffered(false);
        progressText.setFocusCycleRoot(false);
        Font progressTextFont = this.$$$getFont$$$(null, Font.ITALIC, 22, progressText.getFont());
        if (progressTextFont != null) progressText.setFont(progressTextFont);
        progressText.setHorizontalAlignment(0);
        progressText.setHorizontalTextPosition(0);
        progressText.setText("Converting...");
        progressText.setVerticalAlignment(0);
        progressText.setVerticalTextPosition(0);
        contentPane.add(progressText, BorderLayout.CENTER);
        progressBar1 = new JProgressBar();
        contentPane.add(progressBar1, BorderLayout.SOUTH);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

}
