package gg.codie.spritecaster.gui;

import gg.codie.common.utils.OSUtils;
import gg.codie.spritecaster.SpriteCasterFiles;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.util.Locale;

public class DoneScreen {
    public JPanel contentPane;
    private JPanel logoPanel;
    private JButton convertAnotherButton;
    private JButton exitButton;
    private JButton openTexturePackFolderButton;

    public DoneScreen() {
        JLabel logoLabel = new JLabel(new ImageIcon(getClass().getResource("/logo.png")));
        logoPanel.add(logoLabel);
        openTexturePackFolderButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                try {
                    Desktop.getDesktop().open(new File(SpriteCasterFiles.MINECRAFT_TEXTURE_PACKS_PATH));
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        });
        convertAnotherButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                FrameManager.getInstance().setContentPane(new LoadResourcePackScreen().contentPane);
                FrameManager.getInstance().pack();
            }
        });
        exitButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                System.exit(0);
            }
        });
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new BorderLayout(0, 0));
        contentPane = new JPanel();
        contentPane.setLayout(new BorderLayout(0, 0));
        contentPane.setMaximumSize(new Dimension(500, 600));
        contentPane.setMinimumSize(new Dimension(500, 600));
        contentPane.setPreferredSize(new Dimension(500, 600));
        panel1.add(contentPane, BorderLayout.CENTER);
        contentPane.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(25, 25, 25, 25), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, new Color(-4473925)));
        logoPanel = new JPanel();
        logoPanel.setLayout(new BorderLayout(0, 0));
        logoPanel.setAlignmentY(0.5f);
        logoPanel.setMaximumSize(new Dimension(450, 53));
        logoPanel.setMinimumSize(new Dimension(450, 53));
        logoPanel.setPreferredSize(new Dimension(450, 53));
        contentPane.add(logoPanel, BorderLayout.NORTH);
        logoPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, new Color(-4473925)));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new BorderLayout(0, 0));
        contentPane.add(panel2, BorderLayout.SOUTH);
        convertAnotherButton = new JButton();
        convertAnotherButton.setMaximumSize(new Dimension(190, 40));
        convertAnotherButton.setMinimumSize(new Dimension(190, 40));
        convertAnotherButton.setPreferredSize(new Dimension(190, 40));
        convertAnotherButton.setText("Convert Another");
        panel2.add(convertAnotherButton, BorderLayout.EAST);
        exitButton = new JButton();
        exitButton.setMaximumSize(new Dimension(190, 40));
        exitButton.setMinimumSize(new Dimension(190, 40));
        exitButton.setPreferredSize(new Dimension(190, 40));
        exitButton.setText("Exit");
        panel2.add(exitButton, BorderLayout.WEST);
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new BorderLayout(0, 0));
        contentPane.add(panel3, BorderLayout.CENTER);
        final JLabel label1 = new JLabel();
        label1.setAutoscrolls(false);
        label1.setDoubleBuffered(false);
        label1.setFocusCycleRoot(false);
        Font label1Font = this.$$$getFont$$$(null, Font.PLAIN, 22, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setHorizontalAlignment(2);
        label1.setHorizontalTextPosition(2);
        label1.setText("<html><br/><h1>Done</h1>Your resource pack has successfully been converted!<br/><br/>When playing with old versions, choose the texture pack for the same version, or the next version up.<br/></html>");
        label1.setVerticalAlignment(1);
        label1.setVerticalTextPosition(0);
        panel3.add(label1, BorderLayout.NORTH);
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new BorderLayout(0, 0));
        panel4.setMaximumSize(new Dimension(450, 40));
        panel4.setMinimumSize(new Dimension(450, 40));
        panel4.setPreferredSize(new Dimension(450, 40));
        panel3.add(panel4, BorderLayout.CENTER);
        panel4.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(50, 0, 85, 0), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        openTexturePackFolderButton = new JButton();
        openTexturePackFolderButton.setMaximumSize(new Dimension(300, 40));
        openTexturePackFolderButton.setMinimumSize(new Dimension(300, 40));
        openTexturePackFolderButton.setOpaque(true);
        openTexturePackFolderButton.setPreferredSize(new Dimension(300, 40));
        openTexturePackFolderButton.setText("Open Texture Pack Folder");
        panel4.add(openTexturePackFolderButton, BorderLayout.WEST);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

}
